<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://pinkfunk.github.io/</id><title>PinkfunK's</title><subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle> <updated>2023-06-07T15:05:40+08:00</updated> <author> <name>your_full_name</name> <uri>https://pinkfunk.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://pinkfunk.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en-US" href="https://pinkfunk.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator> <rights> © 2023 your_full_name </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Vue</title><link href="https://pinkfunk.github.io/posts/vue/" rel="alternate" type="text/html" title="Vue" /><published>2022-06-06T18:32:00+08:00</published> <updated>2022-06-16T00:50:34+08:00</updated> <id>https://pinkfunk.github.io/posts/vue/</id> <content src="https://pinkfunk.github.io/posts/vue/" /> <author> <name>cxy</name> </author> <category term="Z-Blogging" /> <category term="Vue" /> <summary> Vue框架 VUE生命周期 </summary> </entry> <entry><title>js方法-数字</title><link href="https://pinkfunk.github.io/posts/JS_methods_Number/" rel="alternate" type="text/html" title="js方法-数字" /><published>2021-07-25T13:32:00+08:00</published> <updated>2021-07-25T13:32:00+08:00</updated> <id>https://pinkfunk.github.io/posts/JS_methods_Number/</id> <content src="https://pinkfunk.github.io/posts/JS_methods_Number/" /> <author> <name>cxy</name> </author> <category term="JavaScript" /> <category term="methods" /> <summary> Math 方法 描述 Math.round() 四舍五入为最接近整数 Math.pow(x,y) x的y次幂 Math.sqrt() x的平方根 Math.abs() x的绝对(正)值 Math.celi() x上舍入最接近的整数 Math.floor() x下舍入最接近的整数 Math.sin() 角的正弦 Math.cos() 角的余弦 Math.... </summary> </entry> <entry><title>js方法-数组</title><link href="https://pinkfunk.github.io/posts/JS_methods_Array/" rel="alternate" type="text/html" title="js方法-数组" /><published>2021-07-25T12:32:00+08:00</published> <updated>2023-06-07T15:04:28+08:00</updated> <id>https://pinkfunk.github.io/posts/JS_methods_Array/</id> <content src="https://pinkfunk.github.io/posts/JS_methods_Array/" /> <author> <name>cxy</name> </author> <category term="JavaScript" /> <category term="methods" /> <summary> slice() 可从已有的数组中返回选定的元素 arrarObject.slice(start,end) start 必需，规定从何处开始取。负数表示从数组尾部算起，-1指最后一个元素，-2指倒数第二个元素。 end 可选，规定从何处结束，是数组片段结束处的下标，未指定表示从start到结尾，负数同上。 arr.slice(0)得到一个和arr相同的新数组 splice() 向/从数组中添加/删除项目，然后返回被删除的项目 （该方法会改变数组） arrayObject.splice(index,howmany,item1,…..,itemX) index 必需，规定添加/删除项目的位置，负数表示从数组结尾开始 howmany 必需，需要删除的项目数量，0则不删除 item1,…..,itemX 可选，像数组添加的新项目 arr.splice()返回被删除的元素 arr 返回删除后... </summary> </entry> <entry><title>js方法-正则</title><link href="https://pinkfunk.github.io/posts/jsRegExp/" rel="alternate" type="text/html" title="js方法-正则" /><published>2021-07-25T11:32:00+08:00</published> <updated>2021-07-25T11:32:00+08:00</updated> <id>https://pinkfunk.github.io/posts/jsRegExp/</id> <content src="https://pinkfunk.github.io/posts/jsRegExp/" /> <author> <name>cxy</name> </author> <category term="JavaScript" /> <category term="methods" /> <summary> test()方法 用于检测一个字符串是否匹配某个模式 RegExpObject.test(string) 返回 true或false /[A-Z]/.test(str) match()方法 在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。 该方法类似indexOf()和lastIndexOf(),但它返回指定的值，而不是字符串的位置 stringObject.match(searchvalue) stringObject.match(regexp) searchvalue 必需。规定要检索的字符串值。 regexp 必需。规定要匹配的模式的 RegExp 对象。如果该参数不是 RegExp 对象，则需要首先把它传递给 RegExp 构造函数，将其转换为 RegExp 对象。 返回值 存放匹配结果的数组。该数组的内容依赖于 regexp 是否具有全局标志 g。 ... </summary> </entry> <entry><title>正则</title><link href="https://pinkfunk.github.io/posts/RegExp/" rel="alternate" type="text/html" title="正则" /><published>2021-07-25T10:32:00+08:00</published> <updated>2021-07-25T10:32:00+08:00</updated> <id>https://pinkfunk.github.io/posts/RegExp/</id> <content src="https://pinkfunk.github.io/posts/RegExp/" /> <author> <name>cxy</name> </author> <category term="Z-Blogging" /> <category term="RegExp" /> <summary> 正则表达式 元字符 描述 . 查找单个字符，处理换行和行结束符 \b 匹配单词边界 \B 匹配非单词边界 \cx 匹配由x指明的控制字符。例如，\cM匹配一个Control-M或回车符。 \d 匹配一个数字字符 \D 匹配一个非数字字符 \f 匹配一个换页符 \n 匹配一个换行符 \r 匹配一个回车符 \s ... </summary> </entry> </feed>
